// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package generated_client

import (
	"context"
	"encoding/json"
	goUUID "github.com/google/uuid"
)

type ClientContentClient struct {
	*ClientJsonRPC
}

type retContentClientPushContent func(err error)

func (cli *ClientContentClient) ReqPushContent(ret retContentClientPushContent, attributes ...map[string]interface{}) (request baseJsonRPC) {

	request = baseJsonRPC{
		Method:  "contentclient.pushcontent",
		Params:  requestContentClientPushContent{Attributes: attributes},
		Version: Version,
	}
	var err error
	var response responseContentClientPushContent

	if ret != nil {
		request.retHandler = func(jsonrpcResponse baseJsonRPC) {
			if jsonrpcResponse.Error != nil {
				err = cli.errorDecoder(jsonrpcResponse.Error)
				ret(err)
				return
			}
			err = json.Unmarshal(jsonrpcResponse.Result, &response)
			ret(err)
		}
		request.ID = []byte("\"" + goUUID.New().String() + "\"")
	}
	return
}

func (cli *ClientContentClient) PushContent(ctx context.Context, attributes ...map[string]interface{}) (err error) {

	retHandler := func(_err error) {
		err = _err
	}
	if blockErr := cli.Batch(ctx, cli.ReqPushContent(retHandler, attributes...)); blockErr != nil {
		err = blockErr
		return
	}
	return
}
