// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	config "tec-doc/internal/tec-doc/config"
	model "tec-doc/internal/tec-doc/model"
	postgres "tec-doc/internal/tec-doc/store/postgres"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockStore) CreateTask(ctx context.Context, tx postgres.Transaction, supplierID, userID int64, ip string, uploadDate time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, tx, supplierID, userID, ip, uploadDate)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockStoreMockRecorder) CreateTask(ctx, tx, supplierID, userID, ip, uploadDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockStore)(nil).CreateTask), ctx, tx, supplierID, userID, ip, uploadDate)
}

// DeleteFromBuffer mocks base method.
func (m *MockStore) DeleteFromBuffer(ctx context.Context, tx postgres.Transaction, uploadID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromBuffer", ctx, tx, uploadID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromBuffer indicates an expected call of DeleteFromBuffer.
func (mr *MockStoreMockRecorder) DeleteFromBuffer(ctx, tx, uploadID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromBuffer", reflect.TypeOf((*MockStore)(nil).DeleteFromBuffer), ctx, tx, uploadID)
}

// GetProductsBuffer mocks base method.
func (m *MockStore) GetProductsBuffer(ctx context.Context, tx postgres.Transaction, uploadID int64, limit, offset int) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsBuffer", ctx, tx, uploadID, limit, offset)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsBuffer indicates an expected call of GetProductsBuffer.
func (mr *MockStoreMockRecorder) GetProductsBuffer(ctx, tx, uploadID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsBuffer", reflect.TypeOf((*MockStore)(nil).GetProductsBuffer), ctx, tx, uploadID, limit, offset)
}

// GetProductsHistory mocks base method.
func (m *MockStore) GetProductsHistory(ctx context.Context, tx postgres.Transaction, uploadID int64, limit, offset int) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsHistory", ctx, tx, uploadID, limit, offset)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsHistory indicates an expected call of GetProductsHistory.
func (mr *MockStoreMockRecorder) GetProductsHistory(ctx, tx, uploadID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsHistory", reflect.TypeOf((*MockStore)(nil).GetProductsHistory), ctx, tx, uploadID, limit, offset)
}

// GetSupplierTaskHistory mocks base method.
func (m *MockStore) GetSupplierTaskHistory(ctx context.Context, tx postgres.Transaction, supplierID int64, limit, offset int) ([]model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupplierTaskHistory", ctx, tx, supplierID, limit, offset)
	ret0, _ := ret[0].([]model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupplierTaskHistory indicates an expected call of GetSupplierTaskHistory.
func (mr *MockStoreMockRecorder) GetSupplierTaskHistory(ctx, tx, supplierID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupplierTaskHistory", reflect.TypeOf((*MockStore)(nil).GetSupplierTaskHistory), ctx, tx, supplierID, limit, offset)
}

// SaveIntoBuffer mocks base method.
func (m *MockStore) SaveIntoBuffer(ctx context.Context, tx postgres.Transaction, products []model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveIntoBuffer", ctx, tx, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveIntoBuffer indicates an expected call of SaveIntoBuffer.
func (mr *MockStoreMockRecorder) SaveIntoBuffer(ctx, tx, products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIntoBuffer", reflect.TypeOf((*MockStore)(nil).SaveIntoBuffer), ctx, tx, products)
}

// SaveProductsToHistory mocks base method.
func (m *MockStore) SaveProductsToHistory(ctx context.Context, tx postgres.Transaction, products []model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProductsToHistory", ctx, tx, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProductsToHistory indicates an expected call of SaveProductsToHistory.
func (mr *MockStoreMockRecorder) SaveProductsToHistory(ctx, tx, products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProductsToHistory", reflect.TypeOf((*MockStore)(nil).SaveProductsToHistory), ctx, tx, products)
}

// Transaction mocks base method.
func (m *MockStore) Transaction(ctx context.Context) (postgres.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx)
	ret0, _ := ret[0].(postgres.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction.
func (mr *MockStoreMockRecorder) Transaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockStore)(nil).Transaction), ctx)
}

// MockTecDocClient is a mock of TecDocClient interface.
type MockTecDocClient struct {
	ctrl     *gomock.Controller
	recorder *MockTecDocClientMockRecorder
}

// MockTecDocClientMockRecorder is the mock recorder for MockTecDocClient.
type MockTecDocClientMockRecorder struct {
	mock *MockTecDocClient
}

// NewMockTecDocClient creates a new mock instance.
func NewMockTecDocClient(ctrl *gomock.Controller) *MockTecDocClient {
	mock := &MockTecDocClient{ctrl: ctrl}
	mock.recorder = &MockTecDocClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTecDocClient) EXPECT() *MockTecDocClientMockRecorder {
	return m.recorder
}

// GetArticles mocks base method.
func (m *MockTecDocClient) GetArticles(ctx context.Context, tecDocCfg config.TecDocConfig, dataSupplierID int, article string) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticles", ctx, tecDocCfg, dataSupplierID, article)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticles indicates an expected call of GetArticles.
func (mr *MockTecDocClientMockRecorder) GetArticles(ctx, tecDocCfg, dataSupplierID, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticles", reflect.TypeOf((*MockTecDocClient)(nil).GetArticles), ctx, tecDocCfg, dataSupplierID, article)
}

// GetBrand mocks base method.
func (m *MockTecDocClient) GetBrand(ctx context.Context, tecDocCfg config.TecDocConfig, brandName string) (*model.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBrand", ctx, tecDocCfg, brandName)
	ret0, _ := ret[0].(*model.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBrand indicates an expected call of GetBrand.
func (mr *MockTecDocClientMockRecorder) GetBrand(ctx, tecDocCfg, brandName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrand", reflect.TypeOf((*MockTecDocClient)(nil).GetBrand), ctx, tecDocCfg, brandName)
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServer)(nil).Start))
}

// Stop mocks base method.
func (m *MockServer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockServer)(nil).Stop))
}
